package Server;

import IO.MyCompressorOutputStream;
import IO.MyDecompressorInputStream;
import algorithms.mazeGenerators.IMazeGenerator;
import algorithms.mazeGenerators.Maze;
import algorithms.mazeGenerators.MyMazeGenerator;

import java.io.*;

/**
 * this strategy is a server strategy, it receives dimensions for the maze and returns a maze generated by the server.
 */
public class ServerStrategyGenerateMaze implements IServerStrategy{
    /**
     * @param inFromClient an input stream which allows to read what the client sends.
     * @param outToClient an output stream which allows to write for the client.
     */
    @Override
    public void applyStrategy(InputStream inFromClient, OutputStream outToClient) {
        try{
            ObjectInputStream fromClient = new ObjectInputStream(inFromClient);
            //byte[] sizes = new byte[2];
            int[] sizes=null;
            while(sizes == null){ //wait for input.
                sizes = (int[])fromClient.readObject();
            }
            Class<?> mazeClass = Class.forName("algorithms.mazeGenerators."+Configurations.getInstance().getMazeGeneratingAlgorithm());
            IMazeGenerator img = (IMazeGenerator)mazeClass.getDeclaredConstructor().newInstance();
            Maze maze = img.generate((int)sizes[0],(int)sizes[1]);
            byte[] byteMaze = maze.toByteArray();
            OutputStream is = new MyCompressorOutputStream(new FileOutputStream("tempMaze.maze"));
            is.write(byteMaze);//compress the maze into file called tempMaze.
            int row= maze.getM(),col = maze.getN();
            //compute the needed size for the compression, regarding the maze size.
            int temp = (int)(row*col/8);
            double temp2 = (row*col/8.0);
            temp2=temp2-(double)temp;
            if(temp2>0){temp++;}
            byte[] compressdMaze = new byte[temp+24];
            InputStream in = new FileInputStream("tempMaze.maze");
            in.read(compressdMaze);
            ObjectOutputStream compress = new ObjectOutputStream(outToClient);
            compress.writeObject(compressdMaze);
            compress.flush();
            fromClient.close();
            compress.close();
            is.close();
            in.close();
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }
}
